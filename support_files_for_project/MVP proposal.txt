--Dojo Tweets project proposal--

--Goals--
    1. Fully complete Dojo Tweets to be added to a portofolio.  User minimum standards listed in email from Jason.     
        *Full CRUD
        *Complex database relationships
        *API integration (stripe for eCommerce as an example, etc)
        *AJAX
        *Git collaboration
        *Responsive (optional, but recommended) 
        *Deployment
    2. Design project with SQLAlchemy and MVC
    3. Further refine knowledge of Git using branches and merges. 
    4. Find a viable API to incorporate into the project. 

--Tech Used--
    1. HTML
    2. CSS
    3. JQuery
    4. Python
    5. Flask
    6. SqlAlchemy
    7. SQLite or SQL
    8. AJAX 
    9. (Find an API for the project) Look into Dropbox as an idea?
	10. Bootstrap

--Workflow & Responsibilities--

    1. Implement the last few aspects into SQLAlchemy and modularize code. 
    2. Begin working on front end so new features and AJAX can be implemented use bootstrap. 
    3. Work on backend and new features. 
    4. Test code along the way, but do a full feature test once project seems completed. 
    5. Deploy project into AWS

	Nick modularize code and change names from tweets to ideas, also add admin into users table. 
	Both work on figuring out how self join tables work in SQLAlchemy
	Nick work on AJAX for login/Registration page. 
	Bryan work on Bootstrap for front end (build out generic template) use AJAX for post tweets. 
	Bryan work on commnets and messages
	Nick accounts page
	First person to complete above projects start researching dropbox API
	Next person to complete assignments will start working on friends/block list
	See where we are at, then work on optional features. 
	


--Page feature list--

(Login/Registration)
    1. Give this some front end pizzazz, but this should be pretty straight forward.  Use code from previous assignments to implement.  ISport has a pretty fleshed out login page already. 

(User Dashboard)	
	1. Header should have an Home/Account/Logout
    2. display tweets, but allow user to decide how they want to be sorted.  Use a page redirect attached to a hyper link to accomplish the task. 
	3. Each tweet can be liked and the amount of likes will display below the tweet. 
	4. Logged in user has the option to delete the tweet. 
	5. Clicking a users name will redirect to a new page showing that users tweet history without allowing non logged in user to modify information except to like or comment. 
	6. Add a hyper link under tweet so users can view comments on the tweet  
    7. Add side bar sections that show friends lists and blocked lists. 


(Comments page)
    1. Header should have same as Dashboard
    2. Top of the page should have the tweet showing the numer of likes below.
    3. The remainder of the page should show comments about the tweet. 
    4. If possible add comments to comments and collapse comments that go too deep
    5. add form field so users can input comments on that page(limit character count to tweet size).

(Friends/Block/Private Messaging/Account info)
    1. Header should be the same 
    2. Primary focus on this page should be around private Messaging
    3. Friends list and Block list should be scrollable drop down menu's on the side. 
    4. Think of a way so messaging can only be done if you select a user's name instead of typing in any name you want. 
    5. Block/Ban list should be straigtforward, add user to list and that user can no longer contact you. 
    6. Incorporate DropBox api here. Hopefully this will allow large file sharing between friends. 
    7. Not sure if we should add account info here or not. (If not create a simple account info page with minimal form manipulation) 


(General notes)
	1. Create a friends group, make recipient of friend invite approve before creating relatioship. 
	2. Make an admin account add option to user table. 
	3. Really focus on figuring out how to make self join tables work in SQLAlchemy


(Optional features)
	1. Comments on comments on comments on comments
	2. Add small profile picture next to tweet of user who tweeted. 




